// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// hello
void hello();
RcppExport SEXP _RcppPkgDemo_hello() {
BEGIN_RCPP
    hello();
    return R_NilValue;
END_RCPP
}
// hello2
List hello2();
RcppExport SEXP _RcppPkgDemo_hello2() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(hello2());
    return rcpp_result_gen;
END_RCPP
}
// sumC
double sumC(NumericVector x);
RcppExport SEXP _RcppPkgDemo_sumC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sumC(x));
    return rcpp_result_gen;
END_RCPP
}
// sumI
double sumI(NumericVector x);
RcppExport SEXP _RcppPkgDemo_sumI(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sumI(x));
    return rcpp_result_gen;
END_RCPP
}
// pois_knuth
IntegerVector pois_knuth(float lambda, unsigned int size);
RcppExport SEXP _RcppPkgDemo_pois_knuth(SEXP lambdaSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_knuth(lambda, size));
    return rcpp_result_gen;
END_RCPP
}
// pois_junhao
IntegerVector pois_junhao(float lambda, unsigned int size);
RcppExport SEXP _RcppPkgDemo_pois_junhao(SEXP lambdaSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_junhao(lambda, size));
    return rcpp_result_gen;
END_RCPP
}
// pois_iss
IntegerVector pois_iss(float lambda, unsigned int size);
RcppExport SEXP _RcppPkgDemo_pois_iss(SEXP lambdaSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_iss(lambda, size));
    return rcpp_result_gen;
END_RCPP
}
// pois_mult
IntegerVector pois_mult(float lambda, unsigned int size);
RcppExport SEXP _RcppPkgDemo_pois_mult(SEXP lambdaSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_mult(lambda, size));
    return rcpp_result_gen;
END_RCPP
}
// pois_eit
IntegerVector pois_eit(double lambda, unsigned int size);
RcppExport SEXP _RcppPkgDemo_pois_eit(SEXP lambdaSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_eit(lambda, size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppPkgDemo_hello", (DL_FUNC) &_RcppPkgDemo_hello, 0},
    {"_RcppPkgDemo_hello2", (DL_FUNC) &_RcppPkgDemo_hello2, 0},
    {"_RcppPkgDemo_sumC", (DL_FUNC) &_RcppPkgDemo_sumC, 1},
    {"_RcppPkgDemo_sumI", (DL_FUNC) &_RcppPkgDemo_sumI, 1},
    {"_RcppPkgDemo_pois_knuth", (DL_FUNC) &_RcppPkgDemo_pois_knuth, 2},
    {"_RcppPkgDemo_pois_junhao", (DL_FUNC) &_RcppPkgDemo_pois_junhao, 2},
    {"_RcppPkgDemo_pois_iss", (DL_FUNC) &_RcppPkgDemo_pois_iss, 2},
    {"_RcppPkgDemo_pois_mult", (DL_FUNC) &_RcppPkgDemo_pois_mult, 2},
    {"_RcppPkgDemo_pois_eit", (DL_FUNC) &_RcppPkgDemo_pois_eit, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppPkgDemo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
